name: Performance Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly
  workflow_dispatch:

jobs:
  benchmark:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-benchmark

    - name: Run Python benchmarks
      run: |
        pytest tests/benchmarks/ --benchmark-only --benchmark-json output.json

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: output.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        fail-on-alert: true
        alert-threshold: '150%'
        comment-always: true

  load-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run load tests
      run: k6 run tests/k6/load-test.js

    - name: Generate load test report
      run: |
        echo "# Load Test Results" > LOAD_TEST_REPORT.md
        k6 run --summary-export=summary.json tests/k6/load-test.js
        jq -r '.metrics | to_entries | .[] | "## \(.key)\n- Value: \(.value.values.avg)\n- Min: \(.value.values.min)\n- Max: \(.value.values.max)\n"' summary.json >> LOAD_TEST_REPORT.md

    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results
        path: LOAD_TEST_REPORT.md

  memory-profiling:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install memory_profiler psutil

    - name: Run memory profiling
      run: |
        python -m memory_profiler tests/profiling/memory_test.py > memory_profile.txt

    - name: Generate memory profile report
      run: |
        echo "# Memory Profile Report" > MEMORY_REPORT.md
        echo '```' >> MEMORY_REPORT.md
        cat memory_profile.txt >> MEMORY_REPORT.md
        echo '```' >> MEMORY_REPORT.md

    - name: Upload memory profile
      uses: actions/upload-artifact@v3
      with:
        name: memory-profile
        path: MEMORY_REPORT.md

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
        cache: 'pip'

    - name: Run Radon
      run: |
        pip install radon
        radon cc -a src/ > complexity.txt
        radon mi src/ > maintainability.txt
        radon raw src/ > raw.txt

    - name: Run PyLint
      run: |
        pip install pylint
        pylint src/ --output-format=text > pylint.txt || true

    - name: Generate code quality report
      run: |
        echo "# Code Quality Report" > CODE_QUALITY_REPORT.md
        echo "## Cyclomatic Complexity" >> CODE_QUALITY_REPORT.md
        echo '```' >> CODE_QUALITY_REPORT.md
        cat complexity.txt >> CODE_QUALITY_REPORT.md
        echo '```' >> CODE_QUALITY_REPORT.md
        echo "## Maintainability Index" >> CODE_QUALITY_REPORT.md
        echo '```' >> CODE_QUALITY_REPORT.md
        cat maintainability.txt >> CODE_QUALITY_REPORT.md
        echo '```' >> CODE_QUALITY_REPORT.md
        echo "## Raw Metrics" >> CODE_QUALITY_REPORT.md
        echo '```' >> CODE_QUALITY_REPORT.md
        cat raw.txt >> CODE_QUALITY_REPORT.md
        echo '```' >> CODE_QUALITY_REPORT.md
        echo "## PyLint Report" >> CODE_QUALITY_REPORT.md
        echo '```' >> CODE_QUALITY_REPORT.md
        cat pylint.txt >> CODE_QUALITY_REPORT.md
        echo '```' >> CODE_QUALITY_REPORT.md

    - name: Upload code quality report
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-report
        path: CODE_QUALITY_REPORT.md

  collect-metrics:
    needs: [benchmark, load-test, memory-profiling, code-quality]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate combined report
      run: |
        echo "# Performance Metrics Report" > PERFORMANCE_REPORT.md
        echo "## Benchmark Results" >> PERFORMANCE_REPORT.md
        cat benchmark-results/output.txt >> PERFORMANCE_REPORT.md
        echo "## Load Test Results" >> PERFORMANCE_REPORT.md
        cat load-test-results/LOAD_TEST_REPORT.md >> PERFORMANCE_REPORT.md
        echo "## Memory Profile" >> PERFORMANCE_REPORT.md
        cat memory-profile/MEMORY_REPORT.md >> PERFORMANCE_REPORT.md
        echo "## Code Quality" >> PERFORMANCE_REPORT.md
        cat code-quality-report/CODE_QUALITY_REPORT.md >> PERFORMANCE_REPORT.md

    - name: Create performance issue
      uses: peter-evans/create-issue-from-file@v4
      with:
        title: "ðŸ“Š Performance Report"
        content-filepath: ./PERFORMANCE_REPORT.md
        labels: performance,metrics
        assignees: cbwinslow

